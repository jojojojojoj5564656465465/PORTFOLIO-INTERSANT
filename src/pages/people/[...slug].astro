---
import AvatarImageLarge from '../../components/avatar-image-large'
import BaseRow from '../../components/base-row'
import HCenterRow from '../../components/h-center-row'
import PageTitle from '../../components/page-title'
import PostsPage from '../../components/pages/posts-page'
import PostBody from '../../components/post/post-body'
import { AUTHOR_SLUG, RECORDS_PER_PAGE } from '../../constants'
import ArticleLayout from '../../layouts/ArticleLayout.astro'
import { getAllAuthors,getAuthorMap } from '../../lib/api/author'
import { getAllPosts } from '../../lib/api/post'
import markdownHtml from '../../lib/markdown-html'

export async function getStaticPaths() {
  const allAuthors = await Promise.all(getAllAuthors().map(async author => {
    return {
      ...author,
      html: await markdownHtml(author.fields.content || ''),
    }
  }))

  const authorMap = getAuthorMap()

  const allPosts = await Promise.all(getAllPosts().map(async post => {
    return {
      ...post,
      excerpt: await markdownHtml(post.fields.excerpt || ''),
      //html : await markdownHtml(post.fields.content || ''),
      authors: [authorMap[post.fields.author]],
    }
  }))

  const paths: any[] = []

  allAuthors.forEach(author => {
    const authorPosts = allPosts.filter(post => {
      return post.fields.author === author.fields.name
    })

    const pages = Math.floor(
      (authorPosts.length + RECORDS_PER_PAGE - 1) / RECORDS_PER_PAGE
    )

    paths.push({
      params: {
        slug: author.slug,
      },
      props: {
        author,
        currentPage: 1,
        pages,
        posts: authorPosts.slice(0, RECORDS_PER_PAGE)
      }
    })

    let start = 0

    for (let i = 0; i < pages; ++i) {
      const currentPage = i + 1

      paths.push({
        params: {
          slug: `${author.slug}/page/${currentPage.toString()}`,
        },
        props: {
          author,
          currentPage,
          pages,
          posts: authorPosts.slice(start, start + RECORDS_PER_PAGE)
        }
      })

      start += RECORDS_PER_PAGE
    }
  })


  return paths
}

const {
  author,
  currentPage,
  pages,
  posts,
} = Astro.props
---

<ArticleLayout title={author.fields.name}>
  <BaseRow className="gap-x-8">
    <div class="w-full">
      <HCenterRow className="lg:hidden mb-8">
        <div>
          <AvatarImageLarge author={author} className="w-56" />
        </div>
      </HCenterRow>
      <PageTitle
        title={author.fields.name}
        supertitle="Posts by"
        subtitle={author.fields.title}
        className="text-center lg:text-left"
      />
      <PostBody content={author.html} className="text-2xl" />
    </div>
    <div class="hidden lg:block ">
      <AvatarImageLarge author={author} className="w-64" />
    </div>
  </BaseRow>

  <section class="border-t border-gray-200 mt-16 pt-16">
    <PostsPage posts={posts} page={currentPage} pages={pages} root={`${AUTHOR_SLUG}/${author.slug}`} />
  </section>
</ArticleLayout>