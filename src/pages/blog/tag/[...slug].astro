---
import { range } from 'lodash-es'
import PostsPage from '../../../components/pages/posts-page'
import { RECORDS_PER_PAGE } from '../../../constants'
import ContentLayout from '../../../layouts/ContentLayout.astro'
import { getAuthorMap } from '../../../lib/api/author'
import { getAllPosts } from '../../../lib/api/post'
import markdownHtml from '../../../lib/markdown-html'
import { getUrlFriendlyTag } from '../../../lib/tags'
import { getTagBaseUrl } from '../../../lib/urls'

export async function getStaticPaths() {
  const authorMap = getAuthorMap(['id', 'name', 'title', 'picture'])

  const allPosts = await Promise.all(getAllPosts([
    'title',
    'description',
    'date',
    'slug',
    'url',
    'author',
    'tag',
    'tags',
    'content',
    'ogImage',
    'hero',
  ]).map(async post => {
    return {
      ...post,
      excerpt: await markdownHtml(post.fields.excerpt || ''),
      //html : await markdownHtml(post.fields.content || ''),
      authors: [authorMap[post.fields.author]],
    }
  }))



  const tags = new Set<string>()

  allPosts.forEach(post => {
    post.fields.tags.forEach((tag: string) => {
      tags.add(tag)
    })
  })

  let paths: any[] = []

  Array.from(tags).forEach(tag => {
    const posts = allPosts.filter(post => post.fields.tags.includes(tag))

    const pages = Math.floor(
      (posts.length + RECORDS_PER_PAGE - 1) / RECORDS_PER_PAGE
    )

    range(0, pages).forEach((page: number) => {
      const start = page * RECORDS_PER_PAGE
      const end = start + RECORDS_PER_PAGE
      const currentPage = page + 1

      if (page == 0) {
        paths.push({
          params: {
            slug: `${getUrlFriendlyTag(tag)}`,
          },
          props: {
            tag,
            currentPage,
            pages,
            posts
          }
        })
      }

      paths.push({
        params: {
          slug: `${getUrlFriendlyTag(tag)}/page/${currentPage.toString()}`,
        },
        props: {
          tag,
          currentPage,
          pages,
          posts
        }
      })
    })
  })

  return paths
}

const { slug } = Astro.params

const {
  tag,
  currentPage,
  pages,
  posts
} = Astro.props
---

<ContentLayout title={tag} tab="Blog" supertitle={"Tag"}>

  <PostsPage posts={posts} page={currentPage} pages={pages} root={getTagBaseUrl(tag)} />
</ContentLayout>