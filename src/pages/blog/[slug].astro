---
import ArticleContainer from '../../components/article-container'
import PostBody from '../../components/post/post-body'
import PostDetails from '../../components/post/post-details'
import PostHeader from '../../components/post/post-header'
import RelatedPosts from '../../components/post/related-posts'
import BaseLayout from '../../layouts/BaseLayout.astro'
import SeventyLayout from '../../layouts/seventy-layout'
import { getAuthorMap } from '../../lib/api/author'
import { getAllPosts,getSectionMap } from '../../lib/api/post'
import markdownHtml from '../../lib/markdown-html'
import { getCanonicalPostSlug } from '../../lib/slug'
import { getTags } from '../../lib/tags'
import IPost from '../../types/post'
import IPreviewPost from '../../types/preview-post'


export async function getStaticPaths() {
  const posts = getAllPosts(['slug'])

  const paths = posts.map(post => {
    console.log(getCanonicalPostSlug(post.slug))
    return {
      params: {
        slug: getCanonicalPostSlug(post.slug),
      },
    }
  })

  

  return paths
}

const { slug } = Astro.params

interface IProps {
  post: IPost
  relatedPosts: IPreviewPost[]
  readMorePosts: IPreviewPost[]
}


  const authorMap = getAuthorMap(['id', 'name', 'title', 'picture'])

  const posts = getAllPosts([
    'title',
    'description',
    'slug',
    'author',
    'section',
    'tags',
    'related',
    'content',
    'hero',
  ])

  const sectionMap = getSectionMap(posts)

  let post: any = null
  let postIndex = -1

  Object.keys(sectionMap).every(section => {
    sectionMap[section].every((p, index) => {
      if (p.slug === slug) {
        post = p
        postIndex = index
        return false
      }

      return true
    })

    if (post !== null) {
      return false
    }

    return true
  })

  const author = authorMap[post.fields.author]

  post = {
    ...post,
    html: await markdownHtml(post.fields.content || ''),
    authors: [author],
  }

  const relatedTitles = getTags(post.fields.related)

  const relatedPosts = await Promise.all(
    posts
      .filter(p => relatedTitles.includes(p.fields.title))
      .map(async p => {
        return {
          ...p,
          excerpt: await markdownHtml(p.fields.excerpt || ''),
          authors: [author],
        }
      })
  )

  const readMorePosts = await Promise.all(
    sectionMap[post.fields.section].slice(postIndex + 1).map(async p => {
      return {
        ...p,
        excerpt: await markdownHtml(p.fields.excerpt || ''),
        authors: [author],
      }
    })
  )



---


  <BaseLayout title={post.fields.title} tab="Blog" >
    <>
      <article>
        <PostHeader post={post} />

        <ArticleContainer className="mt-48">
          <SeventyLayout>
            <>
              <PostDetails post={post} className="block lg:hidden mb-8" />

              <PostBody content={post.html} className="mb-32" />
            </>
            <div class="sticky top-0 mb-32" style="top: 40px">
              <PostDetails post={post} />
            </div>
          </SeventyLayout>
        </ArticleContainer>
      </article>

      {/* </ArticleContainer> */}
      {readMorePosts.length > 0 && (
        <ArticleContainer className="bg-gray-50 py-16 lg:py-24">
          <RelatedPosts posts={readMorePosts} title="Keep Reading" />
        </ArticleContainer>
      )}

      {relatedPosts.length > 0 && (
        <ArticleContainer className="bg-gray-50 py-16 lg:py-24">
          <RelatedPosts posts={relatedPosts} title="Related Posts" />
        </ArticleContainer>
      )}
    </>
  </BaseLayout>