---
import { getAllPosts } from '../../../lib/api/post'
import { RECORDS_PER_PAGE } from '../../../constants'
import { range } from 'lodash'
import { getAuthorMap } from '../../../lib/api/author'
import PostsPage from '../../../components/pages/posts-page'
import ArticleLayout from '../../../layouts/ArticleLayout.astro'
import markdownHtml from '../../../lib/markdown-html'

export async function getStaticPaths() {
  const posts = getAllPosts(['slug', 'title'])

  const pages = Math.floor(
    (posts.length + RECORDS_PER_PAGE - 1) / RECORDS_PER_PAGE
  )

  const paths = range(0, pages).map(page => {
    return {
      params: {
        slug: (page + 1).toString(),
      },
    }
  })

  return paths
}

const { slug = '1' } = Astro.props

const page = parseInt(slug) - 1

const authorMap = getAuthorMap(['id', 'name', 'title', 'picture'])

  let posts = getAllPosts([
    'title',
    'description',
    'author',
    'section',
    'tags',
    'hero',
    'excerpt',
  ])

  const pages = Math.floor(
    (posts.length + RECORDS_PER_PAGE - 1) / RECORDS_PER_PAGE
  )
  const start = page * RECORDS_PER_PAGE
  const end = start + RECORDS_PER_PAGE

  posts = posts.slice(start, end)

  const pagePosts = await Promise.all(
    posts.map(async post => {
      return {
        ...post,
        excerpt: await markdownHtml(post.fields.excerpt || ''),
        //html : await markdownHtml(post.fields.content || ''),
        authors: [authorMap[post.fields.author]],
      }
    })
  )
  ---

 <ArticleLayout title="All Posts" tab="Blog">
    <PostsPage posts={posts} page={page} pages={pages} />
  </ArticleLayout>
